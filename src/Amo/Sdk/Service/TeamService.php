<?php

namespace Amo\Sdk\Service;

use Amo\Sdk\AmoClient;
use Amo\Sdk\Models\FreeModel;
use Amo\Sdk\Models\Team;
use Amo\Sdk\Models\TeamProps;
use Amo\Sdk\Models\User;
use Amo\Sdk\Service\SubjectService;
use League\OAuth2\Client\Token\AccessToken;

/**
 * @method SubjectService subject(string $subjectId = null)
 */
class TeamService extends AbstractService
{
    protected ?string $teamId;

    public function __invoke(AmoClient $apiClient, string $teamId = null): TeamService
    {
        $this->teamId = $teamId;
        return parent::__invoke($apiClient); // TODO: Change the autogenerated stub
    }

    public function __call($method, $arguments)
    {
        $serviceClassName = '\\Amo\\Sdk\\Service\\' . ucfirst($method) . 'Service';
        if (!class_exists($serviceClassName)) {
            throw new \BadMethodCallException(
                'Call to undefined method ' . get_class($this) . '::' . $method . '()'
            );
        }

        return call_user_func_array([new $serviceClassName, '__invoke'], array_merge([$this->apiClient], $arguments));
    }

    public function create(Team $team): Team
    {
        $resp = $this->apiClient->post(
            $this->teamUrl(),
            [
            'body' => $team,
            ]
        );
        return Team::fromStream($resp->getBody());
    }

    public function invite(string $userId, TeamProps $teamProps = null): User
    {
        $resp = $this->apiClient->post(
            $this->teamUrl('/invite'),
            [
            'body' => new FreeModel(
                [
                'user_id' => $userId,
                'team_props' => $teamProps
                ]
            ),
            ]
        );
        return User::fromStream($resp->getBody());
    }

    public function kick(string $userId): void
    {
        $this->apiClient->delete($this->teamUrl(['users', $userId]));
    }

    /**
     * @param  string|string[] $location
     * @return string
     */
    private function teamUrl($location = ''): string
    {
        if (is_array($location)) {
            $location = implode('/', $location);
        }
        $url = '/teams';
        if ($this->teamId) {
            $url .= '/' . $this->teamId;
        }
        if ($location != '') {
            $url .= '/' . ltrim($location, '/');
        }
        return $url;
    }

    public function scope(): TeamService
    {
        return (new TeamService())(
            $this->apiClient->withToken(
                $this->apiClient->getTeamAccessToken($this->teamId)
            ),
            $this->teamId
        );
    }

    public function getAccessToken(): ?AccessToken
    {
        return $this->apiClient->getAccessToken();
    }
}
